<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>[##Code|&gt;Passion!]</title><description>coding experiences &amp; stories </description><link>http://localhost:2368/</link><image><url>http://localhost:2368/favicon.png</url><title>[##Code|&gt;Passion!]</title><link>http://localhost:2368/</link></image><generator>Ghost 1.24</generator><lastBuildDate>Fri, 22 Jun 2018 11:30:25 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>a good Angular 6, mongoDb, Node express, real world example.</title><description>&lt;div class="kg-post"&gt;
&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/06/image.png" class="kg-image"&gt;&lt;/figure&gt;&lt;p&gt;just found a good real example of not just angular and expressjs, but for a lot of technologies and frameworks, then take a look, and enjoy it ;)&lt;/p&gt;
&lt;/div&gt;</description><link>http://localhost:2368/angular-6-mongodb-node-express-realworld-example/</link><guid isPermaLink="false">5b2c2639ef9a9600f71d1113</guid><dc:creator>Mouad Cherkaoui</dc:creator><pubDate>Thu, 21 Jun 2018 22:30:29 GMT</pubDate><media:content url="http://localhost:2368/content/images/2018/06/Untitled.png" medium="image"/><content:encoded>&lt;div class="kg-post"&gt;
&lt;figure class="kg-image-card"&gt;&lt;img src="http://localhost:2368/content/images/2018/06/image.png" class="kg-image" alt="a good Angular 6, mongoDb, Node express, real world example."&gt;&lt;/figure&gt;&lt;img src="http://localhost:2368/content/images/2018/06/Untitled.png" alt="a good Angular 6, mongoDb, Node express, real world example."&gt;&lt;p&gt;just found a good real example of not just angular and expressjs, but for a lot of technologies and frameworks, then take a look, and enjoy it ;)&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>FSharp and Azure Functions example</title><description>&lt;div class="kg-post"&gt;
&lt;h2&gt;this is a little tutorial demonstrating the usage of F# language, and ADO.Net as data access mechanism, and also substituting it with a new mechanism that use Azure Table Storage as store.&lt;/h2&gt;&lt;h2&gt;Prerequisites :&lt;/h2&gt;&lt;h3&gt;installing dotnetcore and vscode : &lt;/h3&gt;&lt;p&gt;first of all our sample program is based on .Net core framework,&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/fsharp-news/</link><guid isPermaLink="false">5b2a6f50277dd829b36bb979</guid><category>FSharp</category><category>Getting Started</category><category>F#</category><dc:creator>Mouad Cherkaoui</dc:creator><pubDate>Wed, 20 Jun 2018 15:15:58 GMT</pubDate><media:content url="http://localhost:2368/content/images/2018/06/18278276-2.png" medium="image"/><content:encoded>&lt;div class="kg-post"&gt;
&lt;h2&gt;this is a little tutorial demonstrating the usage of F# language, and ADO.Net as data access mechanism, and also substituting it with a new mechanism that use Azure Table Storage as store.&lt;/h2&gt;&lt;h2&gt;Prerequisites :&lt;/h2&gt;&lt;h3&gt;installing dotnetcore and vscode : &lt;/h3&gt;&lt;img src="http://localhost:2368/content/images/2018/06/18278276-2.png" alt="FSharp and Azure Functions example"&gt;&lt;p&gt;first of all our sample program is based on .Net core framework, and also we will use azure function cli tools to generate debug and deploy our function to Azure App Service.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;go to &lt;a href="https://dot.net"&gt;dot.net&lt;/a&gt;, and then click download link.&lt;/li&gt;&lt;li&gt;install the package.&lt;/li&gt;&lt;li&gt;go to &lt;a href="https://code.visualstudio.com"&gt;code.visualstudio.com&lt;/a&gt;, and download the right version for your operating system, for linux you will find instructions about installing it on this link.&lt;/li&gt;&lt;li&gt;launch vscode, and in the left sidebar you click on the plugins icon, the last one.&lt;/li&gt;&lt;li&gt;then search ionide, and install it.&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;using F# on azure functions and Azure API services.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>Using Ghost on gh-pages</title><description>&lt;div class="kg-post"&gt;
&lt;p&gt;Ghost is a very good blogging system, that uses &lt;strong&gt;Markdown&lt;/strong&gt; to format text.&lt;/p&gt;
&lt;p&gt;and then with this simplicity and the good gh-pages to host projects pages, i decided to go through using ghost on gh-pages and then maybe porting code to be a github app.&lt;/p&gt;
&lt;h2 id="installingghost"&gt;Installing Ghost.&lt;/h2&gt;
&lt;p&gt;in this demos&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/ghosthub-pages/</link><guid isPermaLink="false">5b2a9edd277dd829b36bb98b</guid><category>ghost</category><category>gh-pages</category><category>github</category><dc:creator>Mouad Cherkaoui</dc:creator><pubDate>Wed, 20 Jun 2018 00:25:42 GMT</pubDate><media:content url="https://casper.ghost.org/v1.0.0/images/writing.jpg" medium="image"/><content:encoded>&lt;div class="kg-post"&gt;
&lt;img src="https://casper.ghost.org/v1.0.0/images/writing.jpg" alt="Using Ghost on gh-pages"&gt;&lt;p&gt;Ghost is a very good blogging system, that uses &lt;strong&gt;Markdown&lt;/strong&gt; to format text.&lt;/p&gt;
&lt;p&gt;and then with this simplicity and the good gh-pages to host projects pages, i decided to go through using ghost on gh-pages and then maybe porting code to be a github app.&lt;/p&gt;
&lt;h2 id="installingghost"&gt;Installing Ghost.&lt;/h2&gt;
&lt;p&gt;in this demos we'll use WSL as a dev environment, you can read this article about getting a dev environment using vs code nodejs, and code on linux subsytem.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;first we need to install the ghost cli: npm i -g ghost-cli&lt;/li&gt;
&lt;li&gt;since we are using Ghost to generate content and then capture it using buster, we will install a local dev version of ghost, this is easy using the cli : ghost install local.&lt;/li&gt;
&lt;li&gt;now we need to install buster, then ensure you have python3 and pip3 installed and type : pip3 install buster&lt;/li&gt;
&lt;li&gt;now type : ghost start&lt;/li&gt;
&lt;li&gt;you can go add articles and customize the theme.&lt;/li&gt;
&lt;li&gt;now configure buster : buster setup&lt;/li&gt;
&lt;li&gt;buster cli will ask for your github repo.&lt;/li&gt;
&lt;li&gt;now generate the static files using : buster generate&lt;/li&gt;
&lt;li&gt;type : buster deploy&lt;/li&gt;
&lt;li&gt;go to your .....github.io/&lt;repo&gt; to see the result&lt;/repo&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for now each time you add an article or update something, you have to generate and re-deploy the ghost content to github.&lt;/p&gt;
&lt;h2 id="tryingfirestoreasastoragemechasnism"&gt;trying firestore as a storage mechasnism.&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;![Image description](/path/to/image.jpg)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://casper.ghost.org/v1.0.0/images/computer.jpg" alt="Using Ghost on gh-pages"&gt;&lt;/p&gt;
&lt;p&gt;Most Markdown editors don't make you type this out, though. In Ghost you can click on the image icon in the toolbar at the bottom of the editor, or you can just click and drag an image from your desktop directly into the editor. Both will upload the image for you and generate the appropriate Markdown.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Important Note:&lt;/strong&gt; Ghost does not currently have automatic image resizing, so it's always a good idea to make sure your images aren't gigantic files &lt;strong&gt;before&lt;/strong&gt; uploading them to Ghost.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="makinglists"&gt;Making lists&lt;/h2&gt;
&lt;p&gt;Lists in HTML are a formatting nightmare, but in Markdown they become an absolute breeze with just a couple of characters and a bit of smart automation. For numbered lists, just write out the numbers. For bullet lists, just use &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt;. Like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Crack the eggs over a bowl&lt;/li&gt;
&lt;li&gt;Whisk them together&lt;/li&gt;
&lt;li&gt;Make an omelette&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remember to buy milk&lt;/li&gt;
&lt;li&gt;Feed the cat&lt;/li&gt;
&lt;li&gt;Come up with idea for next story&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="addingquotes"&gt;Adding quotes&lt;/h2&gt;
&lt;p&gt;When you want to pull out a particularly good excerpt in the middle of a piece, you can use &lt;code&gt;&amp;gt;&lt;/code&gt; at the beginning of a paragraph to turn it into a Blockquote. You might've seen this formatting before in email clients.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A well placed quote guides a reader through a story, helping them to understand the most important points being made&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;All themes handles blockquotes slightly differently. Sometimes they'll look better kept shorter, while other times you can quote fairly hefty amounts of text and get away with it. Generally, the safest option is to use blockquotes sparingly.&lt;/p&gt;
&lt;h2 id="dividingthingsup"&gt;Dividing things up&lt;/h2&gt;
&lt;p&gt;If you're writing a piece in parts and you just feel like you need to divide a couple of sections distinctly from each other, a horizontal rule might be just what you need. Dropping &lt;code&gt;---&lt;/code&gt; on a new line will create a sleek divider, anywhere you want it.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This should get you going with the vast majority of what you need to do in the editor, but if you're still curious about more advanced tips then check out the &lt;a href="http://localhost:2368/advanced-markdown/"&gt;Advanced Markdown Guide&lt;/a&gt; - or if you'd rather learn about how Ghost taxononomies work, we've got a overview of &lt;a href="http://localhost:2368/using-tags/"&gt;how to use Ghost tags&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;</content:encoded></item><item><title>F# "|&gt;" operator like using C# extension methods and generics.</title><description>&lt;div class="kg-post"&gt;
&lt;p&gt;on F# we can pipe functions result as the last argument for the next function, something that hasn't an alternative in C#, but we can try to do so using extension methods and generics.&lt;/p&gt;
&lt;h2 id="fpipeoperatorexample"&gt;F# pipe operator example.&lt;/h2&gt;
&lt;p&gt;lets take a closer look to the F# pipe operator through code.&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/using-tags/</link><guid isPermaLink="false">5b2a9edd277dd829b36bb98a</guid><category>Getting Started</category><dc:creator>Ghost</dc:creator><pubDate>Wed, 20 Jun 2018 00:25:41 GMT</pubDate><media:content url="https://casper.ghost.org/v1.0.0/images/tags.jpg" medium="image"/><content:encoded>&lt;div class="kg-post"&gt;
&lt;img src="https://casper.ghost.org/v1.0.0/images/tags.jpg" alt="F# "|&gt;" operator like using C# extension methods and generics."&gt;&lt;p&gt;on F# we can pipe functions result as the last argument for the next function, something that hasn't an alternative in C#, but we can try to do so using extension methods and generics.&lt;/p&gt;
&lt;h2 id="fpipeoperatorexample"&gt;F# pipe operator example.&lt;/h2&gt;
&lt;p&gt;lets take a closer look to the F# pipe operator through code.&lt;/p&gt;
&lt;p&gt;here is the signature of the pipe operator from fsharporg :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Signature:
( |&amp;gt; ) : 'T1 -&amp;gt; ('T1 -&amp;gt; 'U) -&amp;gt; 'U

// Usage:
arg |&amp;gt; func

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and here is the declaration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let (|&amp;gt;) x f = f x 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;   let pipe v f = f v // f(v)
   let (|&amp;gt;) = pipe
   let add x y = 
      x + y
   let multiply x y = 
      x * y
   let add_multiply x y = 
      // this pipe(pipe(x add(y)) multiply(y))
      // is the same as :
      x
      |&amp;gt; add y
      |&amp;gt; multiply x
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="letsprojectthislogictoc"&gt;let's project this logic to C#.&lt;/h2&gt;
&lt;h2 id="extensionmethodsandgenerics"&gt;extension methods and generics.&lt;/h2&gt;
&lt;p&gt;&lt;mark&gt;&lt;strong&gt;News&lt;/strong&gt;, Cycling, #video&lt;/mark&gt;&lt;/p&gt;
&lt;p&gt;Here, the theme would assign the post publicly displayed tags of &lt;code&gt;News&lt;/code&gt;, and &lt;code&gt;Cycling&lt;/code&gt; - but it would also keep a private record of the post being tagged with &lt;code&gt;#video&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In your theme, you could then look for private tags conditionally and give them special formatting:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{#post}}
    {{#has tag=&amp;quot;#video&amp;quot;}}
        ...markup for a nice big video post layout...
    {{else}}
        ...regular markup for a post...
    {{/has}}
{{/post}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can find documentation for theme development techniques like this and many more over on Ghost's extensive &lt;a href="https://themes.ghost.org/"&gt;theme documentation&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;</content:encoded></item><item><title>Managing Ghost users</title><description>&lt;div class="kg-post"&gt;
&lt;p&gt;Ghost has a number of different user roles for your team&lt;/p&gt;
&lt;h3 id="authors"&gt;Authors&lt;/h3&gt;
&lt;p&gt;The base user level in Ghost is an author. Authors can write posts, edit their own posts, and publish their own posts. Authors are &lt;strong&gt;trusted&lt;/strong&gt; users. If you don't trust users to be allowed to publish their own&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/managing-users/</link><guid isPermaLink="false">5b2a9edd277dd829b36bb989</guid><category>Getting Started</category><dc:creator>Ghost</dc:creator><pubDate>Wed, 20 Jun 2018 00:25:40 GMT</pubDate><media:content url="https://casper.ghost.org/v1.0.0/images/team.jpg" medium="image"/><content:encoded>&lt;div class="kg-post"&gt;
&lt;img src="https://casper.ghost.org/v1.0.0/images/team.jpg" alt="Managing Ghost users"&gt;&lt;p&gt;Ghost has a number of different user roles for your team&lt;/p&gt;
&lt;h3 id="authors"&gt;Authors&lt;/h3&gt;
&lt;p&gt;The base user level in Ghost is an author. Authors can write posts, edit their own posts, and publish their own posts. Authors are &lt;strong&gt;trusted&lt;/strong&gt; users. If you don't trust users to be allowed to publish their own posts, you shouldn't invite them to Ghost admin.&lt;/p&gt;
&lt;h3 id="editors"&gt;Editors&lt;/h3&gt;
&lt;p&gt;Editors are the 2nd user level in Ghost. Editors can do everything that an Author can do, but they can also edit and publish the posts of others - as well as their own. Editors can also invite new authors to the site.&lt;/p&gt;
&lt;h3 id="administrators"&gt;Administrators&lt;/h3&gt;
&lt;p&gt;The top user level in Ghost is Administrator. Again, administrators can do everything that Authors and Editors can do, but they can also edit all site settings and data, not just content. Additionally, administrators have full access to invite, manage or remove any other user of the site.&lt;/p&gt;
&lt;h3 id="theowner"&gt;The Owner&lt;/h3&gt;
&lt;p&gt;There is only ever one owner of a Ghost site. The owner is a special user which has all the same permissions as an Administrator, but with two exceptions: The Owner can never be deleted. And in some circumstances the owner will have access to additional special settings if applicable — for example, billing details, if using Ghost(Pro).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;It's a good idea to ask all of your users to fill out their user profiles, including bio and social links. These will populate rich structured data for posts and generally create more opportunities for themes to fully populate their design.&lt;/p&gt;

&lt;/div&gt;</content:encoded></item><item><title>Making your site private</title><description>&lt;div class="kg-post"&gt;
&lt;p&gt;Sometimes you might want to put your site behind closed doors&lt;/p&gt;
&lt;p&gt;If you've got a publication that you don't want the world to see yet because it's not ready to launch, you can hide your Ghost site behind a simple shared pass-phrase.&lt;/p&gt;
&lt;p&gt;You can toggle this preference on at the&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/private-sites/</link><guid isPermaLink="false">5b2a9edd277dd829b36bb988</guid><category>Getting Started</category><dc:creator>Ghost</dc:creator><pubDate>Wed, 20 Jun 2018 00:25:39 GMT</pubDate><media:content url="https://casper.ghost.org/v1.0.0/images/locked.jpg" medium="image"/><content:encoded>&lt;div class="kg-post"&gt;
&lt;img src="https://casper.ghost.org/v1.0.0/images/locked.jpg" alt="Making your site private"&gt;&lt;p&gt;Sometimes you might want to put your site behind closed doors&lt;/p&gt;
&lt;p&gt;If you've got a publication that you don't want the world to see yet because it's not ready to launch, you can hide your Ghost site behind a simple shared pass-phrase.&lt;/p&gt;
&lt;p&gt;You can toggle this preference on at the bottom of Ghost's General Settings&lt;/p&gt;
&lt;p&gt;&lt;img src="https://casper.ghost.org/v1.0.0/images/private.png" alt="Making your site private"&gt;&lt;/p&gt;
&lt;p&gt;Ghost will give you a short, randomly generated pass-phrase which you can share with anyone who needs access to the site while you're working on it. While this setting is enabled, all search engine optimisation features will be switched off to help keep the site off the radar.&lt;/p&gt;
&lt;p&gt;Do remember though, this is &lt;em&gt;not&lt;/em&gt; secure authentication. You shouldn't rely on this feature for protecting important private data. It's just a simple, shared pass-phrase for very basic privacy.&lt;/p&gt;

&lt;/div&gt;</content:encoded></item><item><title>Advanced Markdown tips</title><description>&lt;div class="kg-post"&gt;
&lt;p&gt;There are lots of powerful things you can do with the Ghost editor&lt;/p&gt;
&lt;p&gt;If you've gotten pretty comfortable with &lt;a href="http://localhost:2368/the-editor/"&gt;all the basics&lt;/a&gt; of writing in Ghost, then you may enjoy some more advanced tips about the types of things you can do with Markdown!&lt;/p&gt;
&lt;p&gt;As with the last post about&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/advanced-markdown/</link><guid isPermaLink="false">5b2a9edd277dd829b36bb987</guid><category>Getting Started</category><dc:creator>Ghost</dc:creator><pubDate>Wed, 20 Jun 2018 00:25:38 GMT</pubDate><media:content url="https://casper.ghost.org/v1.0.0/images/advanced.jpg" medium="image"/><content:encoded>&lt;div class="kg-post"&gt;
&lt;img src="https://casper.ghost.org/v1.0.0/images/advanced.jpg" alt="Advanced Markdown tips"&gt;&lt;p&gt;There are lots of powerful things you can do with the Ghost editor&lt;/p&gt;
&lt;p&gt;If you've gotten pretty comfortable with &lt;a href="http://localhost:2368/the-editor/"&gt;all the basics&lt;/a&gt; of writing in Ghost, then you may enjoy some more advanced tips about the types of things you can do with Markdown!&lt;/p&gt;
&lt;p&gt;As with the last post about the editor, you'll want to be actually editing this post as you read it so that you can see all the Markdown code we're using.&lt;/p&gt;
&lt;h2 id="specialformatting"&gt;Special formatting&lt;/h2&gt;
&lt;p&gt;As well as bold and italics, you can also use some other special formatting in Markdown when the need arises, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;strike through&lt;/s&gt;&lt;/li&gt;
&lt;li&gt;&lt;mark&gt;highlight&lt;/mark&gt;&lt;/li&gt;
&lt;li&gt;*escaped characters*&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="writingcodeblocks"&gt;Writing code blocks&lt;/h2&gt;
&lt;p&gt;There are two types of code elements which can be inserted in Markdown, the first is inline, and the other is block. Inline code is formatted by wrapping any word or words in back-ticks, &lt;code&gt;like this&lt;/code&gt;. Larger snippets of code can be displayed across multiple lines using triple back ticks:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.my-link {
    text-decoration: underline;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to get really fancy, you can even add syntax highlighting using &lt;a href="http://prismjs.com/"&gt;Prism.js&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="fullbleedimages"&gt;Full bleed images&lt;/h2&gt;
&lt;p&gt;One neat trick which you can use in Markdown to distinguish between different types of images is to add a &lt;code&gt;#hash&lt;/code&gt; value to the end of the source URL, and then target images containing the hash with special styling. For example:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://casper.ghost.org/v1.0.0/images/walking.jpg#full" alt="Advanced Markdown tips"&gt;&lt;/p&gt;
&lt;p&gt;which is styled with...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;img[src$=&amp;quot;#full&amp;quot;] {
    max-width: 100vw;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This creates full-bleed images in the Casper theme, which stretch beyond their usual boundaries right up to the edge of the window. Every theme handles these types of things slightly differently, but it's a great trick to play with if you want to have a variety of image sizes and styles.&lt;/p&gt;
&lt;h2 id="referencelists"&gt;Reference lists&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The quick brown &lt;a href="https://en.wikipedia.org/wiki/Fox" title="Wikipedia: Fox"&gt;fox&lt;/a&gt;, jumped over the lazy &lt;a href="https://en.wikipedia.org/wiki/Dog" title="Wikipedia: Dog"&gt;dog&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another way to insert links in markdown is using reference lists. You might want to use this style of linking to cite reference material in a Wikipedia-style. All of the links are listed at the end of the document, so you can maintain full separation between content and its source or reference.&lt;/p&gt;
&lt;h2 id="creatingfootnotes"&gt;Creating footnotes&lt;/h2&gt;
&lt;p&gt;The quick brown fox&lt;sup class="footnote-ref"&gt;&lt;a href="#fn1" id="fnref1"&gt;[1]&lt;/a&gt;&lt;/sup&gt; jumped over the lazy dog&lt;sup class="footnote-ref"&gt;&lt;a href="#fn2" id="fnref2"&gt;[2]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Footnotes are a great way to add additional contextual details when appropriate. Ghost will automatically add footnote content to the very end of your post.&lt;/p&gt;
&lt;h2 id="fullhtml"&gt;Full HTML&lt;/h2&gt;
&lt;p&gt;Perhaps the best part of Markdown is that you're never limited to just Markdown. You can write HTML directly in the Ghost editor and it will just work as HTML usually does. No limits! Here's a standard YouTube embed code as an example:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Cniqsc9QfDo?rel=0&amp;amp;showinfo=0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
&lt;hr class="footnotes-sep"&gt;
&lt;section class="footnotes"&gt;
&lt;ol class="footnotes-list"&gt;
&lt;li id="fn1" class="footnote-item"&gt;&lt;p&gt;Foxes are red &lt;a href="#fnref1" class="footnote-backref"&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn2" class="footnote-item"&gt;&lt;p&gt;Dogs are usually not red &lt;a href="#fnref2" class="footnote-backref"&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;

&lt;/div&gt;</content:encoded></item><item><title>Setting up your own Ghost theme</title><description>&lt;div class="kg-post"&gt;
&lt;p&gt;Creating a totally custom design for your publication&lt;/p&gt;
&lt;p&gt;Ghost comes with a beautiful default theme called Casper, which is designed to be a clean, readable publication layout and can be easily adapted for most purposes. However, Ghost can also be completely themed to suit your needs. Rather than just giving&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/themes/</link><guid isPermaLink="false">5b2a9edd277dd829b36bb986</guid><category>Getting Started</category><dc:creator>Ghost</dc:creator><pubDate>Wed, 20 Jun 2018 00:25:37 GMT</pubDate><media:content url="https://casper.ghost.org/v1.0.0/images/design.jpg" medium="image"/><content:encoded>&lt;div class="kg-post"&gt;
&lt;img src="https://casper.ghost.org/v1.0.0/images/design.jpg" alt="Setting up your own Ghost theme"&gt;&lt;p&gt;Creating a totally custom design for your publication&lt;/p&gt;
&lt;p&gt;Ghost comes with a beautiful default theme called Casper, which is designed to be a clean, readable publication layout and can be easily adapted for most purposes. However, Ghost can also be completely themed to suit your needs. Rather than just giving you a few basic settings which act as a poor proxy for code, we just let you write code.&lt;/p&gt;
&lt;p&gt;There are a huge range of both free and premium pre-built themes which you can get from the &lt;a href="http://marketplace.ghost.org"&gt;Ghost Theme Marketplace&lt;/a&gt;, or you can simply create your own from scratch.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://marketplace.ghost.org"&gt;&lt;img src="https://casper.ghost.org/v1.0.0/images/marketplace.jpg" alt="Setting up your own Ghost theme"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Anyone can write a completely custom Ghost theme, with just some solid knowledge of HTML and CSS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ghost themes are written with a templating language called handlebars, which has a bunch of dynamic helpers to insert your data into template files. Like &lt;code&gt;{{author.name}}&lt;/code&gt;, for example, outputs the name of the current author.&lt;/p&gt;
&lt;p&gt;The best way to learn how to write your own Ghost theme is to have a look at &lt;a href="https://github.com/TryGhost/Casper"&gt;the source code for Casper&lt;/a&gt;, which is heavily commented and should give you a sense of how everything fits together.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;default.hbs&lt;/code&gt; is the main template file, all contexts will load inside this file unless specifically told to use a different template.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post.hbs&lt;/code&gt; is the file used in the context of viewing a post.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index.hbs&lt;/code&gt; is the file used in the context of viewing the home page.&lt;/li&gt;
&lt;li&gt;and so on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We've got &lt;a href="http://themes.ghost.org/docs/about"&gt;full and extensive theme documentation&lt;/a&gt; which outlines every template file, context and helper that you can use.&lt;/p&gt;
&lt;p&gt;If you want to chat with other people making Ghost themes to get any advice or help, there's also a &lt;strong&gt;#themes&lt;/strong&gt; channel in our &lt;a href="https://slack.ghost.org"&gt;public Slack community&lt;/a&gt; which we always recommend joining!&lt;/p&gt;

&lt;/div&gt;</content:encoded></item></channel></rss>